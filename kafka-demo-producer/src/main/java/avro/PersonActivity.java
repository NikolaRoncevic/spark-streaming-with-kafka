/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PersonActivity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7103923383125984543L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonActivity\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"activity\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PersonActivity> ENCODER =
      new BinaryMessageEncoder<PersonActivity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PersonActivity> DECODER =
      new BinaryMessageDecoder<PersonActivity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PersonActivity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PersonActivity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PersonActivity>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PersonActivity to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PersonActivity from a ByteBuffer. */
  public static PersonActivity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence uid;
  @Deprecated public java.lang.CharSequence activity;
  @Deprecated public java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PersonActivity() {}

  /**
   * All-args constructor.
   * @param uid The new value for uid
   * @param activity The new value for activity
   * @param timestamp The new value for timestamp
   */
  public PersonActivity(java.lang.CharSequence uid, java.lang.CharSequence activity, java.lang.CharSequence timestamp) {
    this.uid = uid;
    this.activity = activity;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return activity;
    case 2: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.CharSequence)value$; break;
    case 1: activity = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * @return The value of the 'uid' field.
   */
  public java.lang.CharSequence getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * @param value the value to set.
   */
  public void setUid(java.lang.CharSequence value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'activity' field.
   * @return The value of the 'activity' field.
   */
  public java.lang.CharSequence getActivity() {
    return activity;
  }

  /**
   * Sets the value of the 'activity' field.
   * @param value the value to set.
   */
  public void setActivity(java.lang.CharSequence value) {
    this.activity = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new PersonActivity RecordBuilder.
   * @return A new PersonActivity RecordBuilder
   */
  public static avro.PersonActivity.Builder newBuilder() {
    return new avro.PersonActivity.Builder();
  }

  /**
   * Creates a new PersonActivity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PersonActivity RecordBuilder
   */
  public static avro.PersonActivity.Builder newBuilder(avro.PersonActivity.Builder other) {
    return new avro.PersonActivity.Builder(other);
  }

  /**
   * Creates a new PersonActivity RecordBuilder by copying an existing PersonActivity instance.
   * @param other The existing instance to copy.
   * @return A new PersonActivity RecordBuilder
   */
  public static avro.PersonActivity.Builder newBuilder(avro.PersonActivity other) {
    return new avro.PersonActivity.Builder(other);
  }

  /**
   * RecordBuilder for PersonActivity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonActivity>
    implements org.apache.avro.data.RecordBuilder<PersonActivity> {

    private java.lang.CharSequence uid;
    private java.lang.CharSequence activity;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.PersonActivity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.activity)) {
        this.activity = data().deepCopy(fields()[1].schema(), other.activity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PersonActivity instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.PersonActivity other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.activity)) {
        this.activity = data().deepCopy(fields()[1].schema(), other.activity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUid() {
      return uid;
    }

    /**
      * Sets the value of the 'uid' field.
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public avro.PersonActivity.Builder setUid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uid' field.
      * @return This builder.
      */
    public avro.PersonActivity.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'activity' field.
      * @return The value.
      */
    public java.lang.CharSequence getActivity() {
      return activity;
    }

    /**
      * Sets the value of the 'activity' field.
      * @param value The value of 'activity'.
      * @return This builder.
      */
    public avro.PersonActivity.Builder setActivity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.activity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'activity' field has been set.
      * @return True if the 'activity' field has been set, false otherwise.
      */
    public boolean hasActivity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'activity' field.
      * @return This builder.
      */
    public avro.PersonActivity.Builder clearActivity() {
      activity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public avro.PersonActivity.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public avro.PersonActivity.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PersonActivity build() {
      try {
        PersonActivity record = new PersonActivity();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.activity = fieldSetFlags()[1] ? this.activity : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PersonActivity>
    WRITER$ = (org.apache.avro.io.DatumWriter<PersonActivity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PersonActivity>
    READER$ = (org.apache.avro.io.DatumReader<PersonActivity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
